// File: surfaces/2D.js - Surface 2D avec projections neutres
// Desc: En fran√ßais, dans l'architecture, je suis une surface 2D plate pour morphing avec inversion Y des tuiles
// Version 1.2.0 (homog√©n√©isation architecture)
// Author: DNAvatar.org - Arnaud Maignan
// Date: December 15, 2024 23:25 UTC+1
// Logs:
//   - v1.2.0: Ajout createSurface() et config pour homog√©n√©it√© avec autres surfaces
//   - v1.0.0: Surface 2D plate avec coordonn√©es neutres et inversion Y

/**
 * Surface 2D - grille plate pour morphing 2D ‚Üî 3D
 * @param {number} u - Param√®tre U normalis√© [0,1]
 * @param {number} v - Param√®tre V normalis√© [0,1] (invers√© pour Y)
 * @returns {Object} Point 3D {x, y, z}
 */
export function surface2D(u, v) {
  // Inversion de l'ordre des tuiles en Y comme demand√©
  const vInversed = 1 - v;
  // Inversion droite/gauche en X comme demand√©
  const uInversed = 1 - u;
  
  return {
    x: (uInversed - 0.5) * 6, // √âtalement horizontal avec inversion X (droite/gauche)
    y: (vInversed - 0.5) * 4, // √âtalement vertical avec inversion Y
    z: 0                      // Compl√®tement plat (Z=0)
  };
}

// Configuration sp√©cifique 2D
export const config = {
  scale: 108,                    // Scale optimal pour 2D
  defaultRotation: { x: 0, y: 135 }, // Vue par d√©faut
  name: 'Vue 2D',
  emoji: 'üîÑ'
};

// Fonction Three.js (legacy - pour homog√©n√©it√©)
export function createSurface() {
  const geometry = new THREE.PlaneGeometry(6, 4, 30, 20);
  const material = new THREE.MeshStandardMaterial({ color: 0x3399ff, wireframe: true });
  return new THREE.Mesh(geometry, material);
}

// Export par d√©faut pour compatibilit√©
export default surface2D; 