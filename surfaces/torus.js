// File: torus.js - Tore surface topologique
// Desc: En fran√ßais, dans l'architecture, je suis un tore avec structure 2D universelle
// Version 1.3.0 (correction p√¥le sud int√©rieur)
// Author: DNAvatar.org - Arnaud Maignan
// Date: [December 16, 2024] [00:02 UTC+1]
// Logs:
//   - v1.3.0: CORRECTION P√îLE SUD: theta = (v + 0.5) * 2œÄ pour p√¥le sud √† l'int√©rieur du tore
//   - v1.1.0: Structure 2D universelle appliqu√©e
//   - v1.0.0: Ic√¥ne topologique initiale

// Ic√¥ne topologique avec fl√®ches directionnelles
// Tore [+ +] : bords verticaux et horizontaux dans m√™me sens
export const topologyIcon = {
  center: 'üç©',
  top: '‚ñ∂Ô∏è',
  left: '‚è´', 
  right: '‚è´',
  bottom: '‚ñ∂Ô∏è'
};

// Configuration sp√©cifique torus
export const config = {
  scale: 120,                    // Scale optimal pour torus (plus petit que d√©faut 150)
  defaultRotation: { x: 0, y: 135 }, // Vue 3/4 par d√©faut
  name: 'Tore',
  emoji: 'üç©'
};

// Fonction math√©matique du torus
export function torus(u, v) {
  const phi = u * 2 * Math.PI;
  // CORRECTION P√îLE SUD: D√©caler theta de œÄ/2 pour que p√¥le sud soit √† l'int√©rieur
  const theta = (v + 0.5) * 2 * Math.PI; // v=0 ‚Üí theta=œÄ (p√¥le sud int√©rieur)
  const R = 2; // Rayon majeur
  const r = 0.8; // Rayon mineur
  
  return {
    x: (R + r * Math.cos(theta)) * Math.cos(phi),
    y: r * Math.sin(theta),
    z: (R + r * Math.cos(theta)) * Math.sin(phi)
  };
}

// Fonction Three.js (legacy)
export function createSurface() {
  const geometry = new THREE.TorusGeometry(1, 0.4, 32, 64);
  const material = new THREE.MeshStandardMaterial({ color: 0x3399ff });
  return new THREE.Mesh(geometry, material);
}

// Structure d'identification pour le carr√© fondamental
export const identification = [
    { edge1: 'top', edge2: 'bottom', orientation: 'same' },
    { edge1: 'left', edge2: 'right', orientation: 'same' }
];
